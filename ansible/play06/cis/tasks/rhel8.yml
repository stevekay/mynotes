---

- name: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled
  tags: tested
  copy:
    dest: '/etc/modprobe.d/cramfs.conf'
    content: |
      install cramfs /bin/false
      blacklist cramfs

- name: 1.1.1.2 Ensure mounting of squashfs filesystems is disabled
  tags: tested
  copy:
    dest: '/etc/modprobe.d/squashfs.conf'
    content: |
      install squashfs /bin/false
      blacklist squashfs

- name: 1.1.1.3 Ensure mounting of udf filesystems is disabled
  tags: tested
  copy:
    dest: '/etc/modprobe.d/udf.conf'
    content: |
      install udf /bin/false
      blacklist udf

- name: 1.1.2.1 Ensure /tmp is a separate partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /tmp " /proc/mounts'

- name: 1.1.2.1 Ensure /tmp is a separate partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.2.2 Ensure nodev option set on /tmp partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /tmp \S* .*nodev" /proc/mounts'

- name: 1.1.2.2 Ensure nodev option set on /tmp partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.2.3 Ensure noexec option set on /tmp partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /tmp \S* .*noexec" /proc/mounts'

- name: 1.1.2.3 Ensure noexec option set on /tmp partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.2.4 Ensure nosuid option set on /tmp partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /tmp \S* .*nosuid" /proc/mounts'

- name: 1.1.2.4 Ensure nosuid option set on /tmp partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.3.1 Ensure /var is a separate partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var " /proc/mounts'

- name: 1.1.3.1 Ensure /var is a separate partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.3.2 Ensure nodev option set on /var partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var \S* .*nodev" /proc/mounts'

- name: 1.1.3.2 Ensure nodev option set on /var partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.3.3 Ensure noexec option set on /var partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var \S* .*noexec" /proc/mounts'

- name: 1.1.3.3 Ensure noexec option set on /var partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.3.4 Ensure nosuid option set on /var partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var \S* .*nosuid" /proc/mounts'

- name: 1.1.3.4 Ensure nosuid option set on /var partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.4.1 Ensure /var/tmp is a separate partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/tmp " /proc/mounts'

- name: 1.1.4.1 Ensure /var/tmp is a separate partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.4.2 Ensure noexec option set on /var/tmp partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/tmp \S* .*noexec" /proc/mounts'

- name: 1.1.4.2 Ensure noexec option set on /var/tmp partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.4.3 Ensure nosuid option set on /var/tmp partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/tmp \S* .*nosuid" /proc/mounts'

- name: 1.1.4.3 Ensure nosuid option set on /var/tmp partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.4.4 Ensure nodev option set on /var/tmp partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/tmp \S* .*nodev" /proc/mounts'

- name: 1.1.4.4 Ensure nodev option set on /var/tmp partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.5.1 Ensure /var/log is a separate partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/log " /proc/mounts'

- name: 1.1.5.1 Ensure /var/log is a separate partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.5.2 Ensure nodev option set on /var/log partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/log \S* .*nodev" /proc/mounts'

- name: 1.1.5.2 Ensure nodev option set on /var/log partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.5.3 Ensure noexec option set on /var/log partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/log \S* .*noexec" /proc/mounts'

- name: 1.1.5.3 Ensure noexec option set on /var/log partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.5.4 Ensure nosuid option set on /var/log partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/log \S* .*nosuid" /proc/mounts'

- name: 1.1.5.4 Ensure nosuid option set on /var/log partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.6.1 Ensure /var/log/audit is a separate partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/log/audit " /proc/mounts'

- name: 1.1.6.1 Ensure /var/log/audit is a separate partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.6.2 Ensure noexec option set on /var/log/audit partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/log/audit \S* .*noexec" /proc/mounts'

- name: 1.1.6.2 Ensure noexec option set on /var/log/audit partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.6.3 Ensure nodev option set on /var/log/audit partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/log/audit \S* .*nodev" /proc/mounts'

- name: 1.1.6.3 Ensure nodev option set on /var/log/audit partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.6.4 Ensure nosuid option set on /var/log/audit partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /var/log/audit \S* .*nosuid" /proc/mounts'

- name: 1.1.6.4 Ensure nosuid option set on /var/log/audit partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.7.1 Ensure /home is a separate partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /home " /proc/mounts'

- name: 1.1.7.1 Ensure /home is a separate partition - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.7.2 Ensure nodev option set on /home partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /home \S* .*nodev" /proc/mounts'

- name: 1.1.7.2 Ensure nodev option set on /home - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.7.3 Ensure nosuid option set on /home partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /home \S* .*nosuid" /proc/mounts'

- name: 1.1.7.3 Ensure nosuid option set on /home - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.7.4 Ensure usrquota option set on /home partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /home \S* .*usrquota" /proc/mounts'

- name: 1.1.7.4 Ensure usrquota option set on /home - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.7.5 Ensure grpquota option set on /home partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /home \S* .*grpquota" /proc/mounts'

- name: 1.1.7.5 Ensure grpquota option set on /home - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.8.1 Ensure nodev option set on /dev/shm partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /dev/shm \S* .*nodev" /proc/mounts'

- name: 1.1.8.1 Ensure nodev option set on /dev/shm - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.8.2 Ensure noexec option set on /dev/shm partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /dev/shm \S* .*noexec" /proc/mounts'

- name: 1.1.8.2 Ensure noexec option set on /dev/shm - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.8.3 Ensure nosuid option set on /dev/shm partition
  tags: tested
  register: presence
  shell: 'grep -E "^\S* /dev/shm \S* .*nosuid" /proc/mounts'

- name: 1.1.8.3 Ensure nosuid option set on /dev/shm - check results
  tags: tested
  debug: msg="check"
  failed_when: presence.stdout == ''

- name: 1.1.9 Disable Automounting
  tags: tested
  package:
    name: autofs
    state: absent

- name: 1.1.10 Disable USB Storage
  tags: tested
  copy:
    dest: '/etc/modprobe.d/usb_storage.conf'
    content: |
      install usb-storage /bin/true

- name: 1.2.1 Ensure Red Hat Subscription Manager connection is configured
  tags: tested
  register: result
  shell: 'subscription-manager identity'
  failed_when: "'system identity:' not in result.stdout"

- name: 1.2.2 Ensure GPG keys are configured - global setting
  tags: tested
  ansible.builtin.lineinfile:
    path: /etc/dnf/dnf.conf
    regexp: '^\s*gpgcheck\s*='
    line: gpgcheck=1

- name: 1.2.2 Ensure GPG keys are configured - gather repo filenames
  tags: tested
  ansible.builtin.find:
    paths: /etc/yum.repos.d
    file_type: file
    patterns: '*.repo'
  register: repos

- name: 1.2.2 Ensure GPG keys are configured - repo
  tags: tested
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    regexp: '^\s*gpgcheck\s*='
    line: gpgcheck=1
  with_items: "{{ repos.files }}"

- name: 1.2.4 Ensure package manager repositories are configured
  tags: tested
  command: '/usr/bin/dnf repolist'
  register: dnf
  failed_when: "'rhel-8-for' not in dnf.stdout" 

- name: 1.3.1 Ensure AIDE is installed
  tags: tested
  package:
    name: aide
    state: present

- name: 1.3.1 Ensure AIDE is installed - see if setup
  tags: tested
  shell: '/sbin/aide --check 2>&1 ; /usr/bin/true'
  ignore_errors: yes
  register: result

- name: 1.3.1 Ensure AIDE is installed - init if wasnt setup
  tags: tested
  command: '/sbin/aide --init'
  when: " 'Couldn\\'t open file /var/lib/aide/aide.db.gz for reading' in result.stdout "

- name: 1.3.1 Ensure AIDE is installed - mv if wasnt setup
  tags: tested
  command: 'mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz'
  when: " 'Couldn\\'t open file /var/lib/aide/aide.db.gz for reading' in result.stdout "

- name: 1.3.2 Ensure filesystem integrity is regularly checked - create aidecheck.service
  tags: tested
  copy:
    dest: /etc/systemd/system/aidecheck.service
    src: systemd/aidecheck.service
    owner: root
    group: root
    mode: 0644

- name: 1.3.2 Ensure filesystem integrity is regularly checked - create aidecheck.timer
  tags: tested
  copy:
    dest: /etc/systemd/system/aidecheck.timer
    src: systemd/aidecheck.timer
    owner: root
    group: root
    mode: 0644

- name: 1.3.2 Ensure filesystem integrity is regularly checked - enable aidecheck.timer
  tags: tested
  ansible.builtin.systemd:
    daemon_reload: yes
    name: aidecheck.timer
    enabled: yes
    state: started
    masked: no

- name: 1.4.1 Ensure bootloader password is set - see if setup
  tags: tested
  register: grub
  shell: 'grep -E "^\s*GRUB2_PASSWORD\s*=grub......" /boot/grub2/user.cfg 2>/dev/null ; /usr/bin/true'

- name: 1.4.1 Ensure bootloader password is set - generate hash password
  tags: tested
  shell: 'printf "foo\nfoo\n" | grub2-mkpasswd-pbkdf2 | sed -n "/^PBKDF2/{s/.* grub/grub/;p}"'
  when: " grub.stdout == '' "
  register: grubhash

- name: 1.4.1 Ensure bootloader password is set - set password
  tags: tested
  copy:
    dest: '/boot/grub2/user.cfg'
    content: |
      GRUB2_PASSWORD={{ grubhash.stdout }}
  when: " grub.stdout == '' "

- name: 1.4.2 Ensure permissions on bootloader config are configured - locate files
  tags: tested
  find:
    paths: '/boot'
    patterns: "(grub.cfg|grubenv|user.cfg)$"
    use_regex: yes
    recurse: yes
  register: grubfiles

- name: 1.4.2 Ensure permissions on bootloader config are configured
  tags: tested
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: root
    group: root
    mode: '0700'
  with_items: "{{ grubfiles.files }}"

# TODO : UEFI with associated fstab changes

- name: 1.4.3 Ensure authentication is required when booting into rescue mode - create dir if needed
  ansible.builtin.file:
    path: /etc/systemd/system/rescue.service.d
    state: directory
    mode: '0755'

- name: 1.4.3 Ensure authentication is required when booting into rescue mode
  copy:
    dest: /etc/systemd/system/rescue.service.d/00-require-auth.conf
    content: |
      [Service]
      ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue

- name: 1.5.1 Ensure core dump storage is disabled
  ansible.builtin.lineinfile:
    path: /etc/systemd/coredump.conf
    regexp: '^\s*Storage\s*='
    line: Storage=none

- name: 1.5.2 Ensure core dump backtraces are disabled
  ansible.builtin.lineinfile:
    path: /etc/systemd/coredump.conf
    regexp: '^\s*ProcessSizeMax\s*='
    line: ProcessSizeMax=0

- name: 1.5.3 Ensure address space layout randomization (ASLR) is enabled - in file
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/60-kernel_sysctl.conf
    regexp: '^\s*kernel.randomize_va_space\s*='
    line: 'kernel.randomize_va_space = 2'
    create: true

- name: 1.5.3 Ensure address space layout randomization (ASLR) is enabled - get running value
  register: sysctl
  command: 'sysctl -n kernel.randomize_va_space'

- name: 1.5.3 Ensure address space layout randomization (ASLR) is enabled - set running value
  command: 'sysctl kernel.randomize_va_space=2'
  when: sysctl.stdout != '2'

- name: 1.6.1.1 Ensure SELinux is installed
